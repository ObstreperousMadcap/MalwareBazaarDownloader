#!/usr/bin/python3

# Copyright (c) 2023 Michael Logan <ObstreperousMadcap@soclab.tech>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# Version    Date        Notes
# 1.0        2023-09-15  "Initial" release. Not *really* the first, but the first one with a version number.

import os
from pathlib import Path
import pyzipper
import requests

malwareBazaarAPIURL = "https://mb-api.abuse.ch/api/v1"

# Recommend first using MalwareBazaar's "Browse" to confirm the fileType and verify files exist
# malwareBazaarFileTypes = [{'fileType' : 'ps1', 'downloadLimit' : '10'},
#                           {'fileType' : 'py', 'downloadLimit' : '10'},
#                           {'fileType' : 'sh', 'downloadLimit' : '10'}]
malwareBazaarFileTypes = [{'fileType' : 'elf', 'downloadLimit' : '1000'}]

for malwareBazaarFileType in malwareBazaarFileTypes:
    fileType = malwareBazaarFileType['fileType']
    downloadLimit = malwareBazaarFileType['downloadLimit']
    
    # Create the folder to store the files and the log
    Path(fileType).mkdir(parents=True, exist_ok=True)
    folderName = fileType + "/"

    # Create the logfile
    with open(folderName + '!MalwareBazzarFilesDownloaded-' + fileType + '.txt', 'w') as filesDownloaded:
    
        # Query MalwwareBazaar for a list of files
        postData = {'query' : 'get_file_type', 'file_type' : fileType, 'limit' : downloadLimit}
        response = requests.post(malwareBazaarAPIURL, data=postData)
        responseContent = response.json()
        
        # Check for a problem with the query
        if responseContent['query_status'] != "ok":
            # There was either a problem with the query or no data was returned
            print(responseContent['query_status'], file=filesDownloaded)
        else:
            # Extract the file list from the returned json dictionary 
            fileList = responseContent['data']    
            
            # Iterate through the list of files
            for fileInfo in fileList:
                
                # Log the file data; check the MalwareBazaar API webpage for additional parameters
                fileInfoLogEntry = fileInfo['first_seen'] + "; " + \
                                   fileInfo['sha256_hash'] + "; " + \
                                   fileInfo['file_name']
                print(fileInfoLogEntry)
                print(fileInfoLogEntry, file=filesDownloaded)
                
                # Get the file
                postData = {'query' : 'get_file', 'sha256_hash' : fileInfo['sha256_hash']}
                response = requests.post(malwareBazaarAPIURL, data=postData)
                responseContent = response.content

                # To-Do: Add error checking to be sure a file was returned

                # Create a name for the zip archive that will store the downloaded content
                zipArchiveFilename = folderName + fileInfo['file_name'] + ".zip"
        
                # Save the downloaded content to the zip archive
                with open(zipArchiveFilename, 'wb') as zippedFileHandle:
                    zippedFileHandle.write(responseContent)
        
                try:
                    # Extract the file from the zip archive
                    with pyzipper.AESZipFile(zipArchiveFilename) as zippedFileHandle:
                        zippedFileHandle.pwd = b'infected'
                        zippedFileHandle.extractall(path=fileType)

                except:
                    print("Not a valid ZIP: " + zipArchiveFilename)
                    print("Not a valid ZIP: " + zipArchiveFilename, file=filesDownloaded)
                    
                else:
                    # Rename the extracted file to include the original name
                    oldUnzippedFilename = folderName + fileInfo['sha256_hash'] + "." + fileType
                    newUnzippedFilename = folderName + fileInfo['sha256_hash'] + " - " + fileInfo['file_name']
                    os.rename(oldUnzippedFilename, newUnzippedFilename)
    
                    # Delete the zip archive
                    os.remove(zipArchiveFilename)
